#!/usr/bin/env bash

set -e

die () {
    echo >&2 "$@"
    exit 1
}

download()
{
    echo "Downloading ${IMG_URL} ..."
    curl -q ${IMG_URL} -o $(basename ${IMG_URL})
}

mkrootfsfromiso()
{
    # Make sure the downloaded file exists
    if [ ! -e ${IMG_FILENAME} ]; then
	echo "${IMG_FILENAME} doesn't exist"
    fi

    # Mount the ISO
    mount -r -o loop ${IMG_FILENAME} ${CRUX}

    # Extract pkgutils
    tar -C ${TMP} -xf ${CRUX}/tools/pkgutils#*.pkg.tar.gz

    # Put pkgadd in the $PATH
    export PATH="${TMP}/usr/bin:$PATH"

    # Install core packages
    mkdir -p ${ROOTFS}/var/lib/pkg
    touch ${ROOTFS}/var/lib/pkg/db

    for pkg in ${CRUX}/crux/core/*; do
	pkgadd -r ${ROOTFS} ${pkg}
    done

    umount $CRUX
}

cleanuprootfs()
{
    # Remove agetty and inittab config
    if (grep agetty ${ROOTFS}/etc/inittab 2>&1 > /dev/null); then
	echo "Removing agetty from /etc/inittab ..."
	chroot ${ROOTFS} sed -i -e "/agetty/d" /etc/inittab
	chroot ${ROOTFS} sed -i -e "/shutdown/d" /etc/inittab
	chroot ${ROOTFS} sed -i -e "/^$/N;/^\n$/d" /etc/inittab
    fi

    # Remove kernel source
    rm -rf ${ROOTFS}/usr/src/*

    # Remove unnecessary packages
    pkgs=(btrfs-progs dhcpcd e2fsprogs ed exim hdparm jfsutils \
		      libusb-compat kbd lilo man-db man-pages  \
		      mlocate openssh pciutils ppp psmisc rc   \
		      reiserfsprogs sysfsutils sysvinit xfsprogs)

    for pkg in ${pkgs[@]}; do
	chroot ${ROOTFS} /usr/bin/pkgrm ${pkg} || true
    done
}

mkdev()
{
    echo "Rebuilding /dev"

    # udev doesn't work in containers, rebuild /dev
    DEV=${ROOTFS}/dev

    rm -rf       $DEV
    mkdir -p     $DEV
    mkdir -m 755 $DEV/pts
    mkdir -m 1777 $DEV/shm
    mknod -m 600 $DEV/initctl p
    mknod -m 600 $DEV/console c 5 1
    mknod -m 666 $DEV/full    c 1 7
    mknod -m 666 $DEV/null    c 1 3
    mknod -m 666 $DEV/ptmx    c 5 2
    mknod -m 666 $DEV/random  c 1 8
    mknod -m 666 $DEV/tty     c 5 0
    mknod -m 666 $DEV/tty0    c 4 0
    mknod -m 666 $DEV/urandom c 1 9
    mknod -m 666 $DEV/zero    c 1 5
}

package()
{
    echo "Packaging Root FS ..."

    XZ_OPT=-9 \
    tar --numeric-owner \
	--exclude=/etc/mtab \
	--exclude=/root/.bash_history \
	-P -cJf rootfs.tar.xz \
	-C ${ROOTFS} ./
}

main()
{
    ROOTFS=$(mktemp -d /tmp/rootfs-XXXXXXXXXX)
    CRUX=$(mktemp -d /tmp/crux-XXXXXXXXXX)
    TMP=$(mktemp -d /tmp/XXXXXXXXXX)

    download
    mkrootfsfromiso
    cleanuprootfs
    mkdev
    package

    rm -rf $ROOTFS
    rm -rf $CRUX
    rm -rf $TMP
}

main "$@"
